{"version":3,"sources":["components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","alt","message","likesCount","MyPosts","React","memo","console","log","postsElements","posts","map","p","postsBlock","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Component","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileInfo","profile","descriptionBlock","photos","large","aboutMe","lookingForAJobDescription","fullName","Preloader","Profile","ProfileContainer","userId","this","match","params","authorizedUseId","history","push","getUserProfile","getStatus","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.47429c4b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"Profile_descriptionBlock__1l0db\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2MrFW\",\"posts\":\"MyPosts_posts__2MW41\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2JGOG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wall\":\"ProfileInfo_wall__4YHEE\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n\r\n    return (\r\n      <div  className={s.item}>\r\n        <img src=\"https://s1.iconbird.com/ico/2013/12/505/w450h4001385925286User.png\" alt=\"\"/>\r\n        {props.message}\r\n        <div>\r\n    <span>Like {props.likesCount}</span>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from './../../../utils/validators/validators'\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\n\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n  console.log('RRRRRRRRRRRRRRRRRRRRRRRRRRRR');\r\n  let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} />)\r\n\r\n\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My Posts</h3>\r\n      <AddNewPostFormRedux onSubmit={onAddPost} />\r\n      <div className={s.posts}>\r\n        {postsElements}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n)\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm = (props) => {\r\n\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field name='newPostText' component={Textarea} placeholder='Post your message'\r\n          validate={[required, maxLength10]} />\r\n\r\n      </div>\r\n      <div>\r\n        <button>Add Post</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm({ form: 'ProfileAddNewPostForm' })(AddNewPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer'\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n// const MyPostsContainer = () => {\r\n//   return <StoreContext.Consumer>\r\n//     {\r\n//       (store) => {\r\n//         let state = store.getState()\r\n//         let addPost = () => {\r\n//           store.dispatch(addPostActionCreator())\r\n//         }\r\n\r\n//         let onPostChange = (text) => {\r\n//           let action = updateNewPostTextActionCreator(text)\r\n//           store.dispatch(action)\r\n//         }\r\n//         return <MyPosts updateNewPostText={onPostChange}\r\n//           addPost={addPost}\r\n//           posts={state.profilePage.posts}\r\n//           newPostText={state.profilePage.newPostText} />\r\n\r\n//       }\r\n//     }\r\n//   </StoreContext.Consumer>\r\n\r\n// }\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    // updateNewPostText: (text) => {\r\n    //   let action = updateNewPostTextActionCreator(text);\r\n    //   dispatch(action);\r\n    // },\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    }\r\n  }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport Preloader from '../../common/preloader/Preloader';\r\n\r\n\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        console.log(this)\r\n        this.setState({\r\n            editMode: true,\r\n            status: this.props.status\r\n        })\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n    onStatusChange = (e) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevStatus) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || '-----'}</span>\r\n                    </div>}\r\n                {\r\n                    this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode} value={this.state.status}></input>\r\n                    </div>\r\n                }\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;","import React, { useEffect, useState } from 'react';\r\nimport Preloader from '../../common/preloader/Preloader';\r\n\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n                </div>}\r\n            { editMode &&\r\n                <div>\r\n                    <input autoFocus={true} onChange={onStatusChange} onBlur={deactivateEditMode} value={status}></input>\r\n                </div>\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport Preloader from '../../common/preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatus from './ProfileStatus'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus }) => {\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n  return (\r\n    <div>\r\n      <div className={s.descriptionBlock}>\r\n        <img src={profile.photos.large} />\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n        <div>\r\n          <p>{profile.aboutMe}</p>\r\n        </div>\r\n        <div>\r\n          <p>{profile.lookingForAJobDescription}</p>\r\n        </div>\r\n        <div>\r\n          <p>{profile.fullName}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nconst Profile = (props) => {\r\n\r\n  return <div>\r\n    <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n    <MyPostsContainer />\r\n  </div>\r\n}\r\n\r\nexport default Profile","import * as axios from \"axios\";\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport { getUserProfile, getStatus, updateStatus } from \"../../redux/profile-reducer\";\r\nimport { withRouter } from \"react-router\"\r\n\r\nimport { compose } from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n  componentDidMount() {\r\n    let userId = this.props.match.params.userId\r\n    if (!userId) {\r\n      userId = this.props.authorizedUseId\r\n      if (!userId) {\r\n        this.props.history.push('/login')\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId)\r\n    this.props.getStatus(userId)\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} />\r\n    )\r\n  }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUseId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\r\n  withRouter,\r\n  // withAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}